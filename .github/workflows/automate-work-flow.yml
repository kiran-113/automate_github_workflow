# .github/workflows/main_pipeline.yml

name: CI/CD Pipeline with Main Branch Updates

on:
  pull_request:
    branches:
      - dev
      - stage
      - test
      - prod
    types:
      - closed  # Trigger on PR close event to check if merged

jobs:
  merge_to_main:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Fetch source branch of the PR
      run: git fetch origin ${{ github.event.pull_request.head.ref }}:pr_branch

    - name: Attempt to merge
      id: merge
      run: |
        git checkout main
        git merge --no-ff pr_branch || echo "::set-output name=conflict::true"

    - name: Handle Conflicts
      if: steps.merge.outputs.conflict == 'true'
      run: echo "Merge conflict detected. Manual resolution required."

    - name: Attempt to push changes
      if: steps.merge.outputs.conflict != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git push origin main

    # Add environment-specific tasks here after a successful merge
    - name: Trigger environment workflows
      if: steps.merge.outputs.conflict != 'true'
      run: |
        if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
          echo "Running dev-specific tasks after merge"
          # Add your dev-specific tasks here

        elif [[ "${GITHUB_REF##*/}" == "stage" ]]; then
          echo "Running stage-specific tasks after merge"
          # Add your stage-specific tasks here

        elif [[ "${GITHUB_REF##*/}" == "test" ]]; then
          echo "Running test environment tasks after merge"
          # Add your test-specific tasks here

        elif [[ "${GITHUB_REF##*/}" == "prod" ]]; then
          echo "Running production deployment tasks after merge"
          # Add your prod-specific tasks here
        fi