# .github/workflows/main_pipeline.yml

name: CI/CD Pipeline with Main Branch Updates

on:
  pull_request:
    branches:
      - 'dev'
      - 'stage'
      - 'test'
      - 'prod'
    types:
      - closed  # Trigger on PR close event, to check if merged

jobs:
  handle_pr_merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Fetch all branches
      run: git fetch origin +refs/heads/*:refs/remotes/origin/*

    - name: Merge changes into main
      run: |
        git checkout main
        git merge --no-ff origin/${{ github.event.pull_request.base.ref }}

    - name: Push changes to main branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: git push origin main

    # Handle specific branch operations after the merge
    - name: Trigger environment workflows
      run: |
        if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
          echo "Running dev-specific tasks after merge"
          # Placeholder for dev-specific tasks or use `./github/workflows/dev.yml`

        elif [[ "${GITHUB_REF##*/}" == "stage" ]]; then
          echo "Running stage-specific tasks after merge"
          # Placeholder for stage-specific tasks or use `./github/workflows/stage.yml`

        elif [[ "${GITHUB_REF##*/}" == "test" ]]; then
          echo "Running test environment tasks after merge"
          # Placeholder for test-specific tasks or use `./github/workflows/test.yml`

        elif [[ "${GITHUB_REF##*/}" == "prod" ]]; then
          echo "Running production deployment tasks after merge"
          # Placeholder for prod-specific tasks or use `./github/workflows/prod.yml`
        fi
